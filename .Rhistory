library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
setwd("C:/Users/frost/git/MechaCar_Statistical_Analysis")
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
View(car_table)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
View(total_summary)
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
View(lot_summary)
?t.test()
View(suspension_table)
View(lot_summary)
View(suspension_table)
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,1500)
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=null,1500)
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,1500)
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,1500)
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
mean(lot1[['PSI']])
View(suspension_table)
mean(lot2[['PSI']])
View(suspension_table)
mean(lot1[['PSI']])
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
View(lot1)
View(lot2)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
t.test(subset(suspension_table, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
?subset()
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
t.test(subset(suspension_table$PSI, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
View(suspension_table)
t.test(lot1$PSI,y=NULL,mu=1500)
t.test(lot2$PSI,y=NULL,mu=1500)
t.test(lot3$PSI,y=NULL,mu=1500)
# Deliverable 1
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# PSI across all manufacturing lots
t.test(subset(suspension_table$PSI, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
# PSI across Lot 1
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
t.test(lot1$PSI,y=NULL,mu=1500)
# PSI across Lot 2
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
t.test(lot2$PSI,y=NULL,mu=1500)
# PSI across Lot 3
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
t.test(lot3$PSI,y=NULL,mu=1500)
View(lot1)
View(total_summary)
View(suspension_table)
View(lot_summary)
# Deliverable 1
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# PSI across all manufacturing lots
t.test(subset(suspension_table$PSI, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
# PSI across Lot 1
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
t.test(lot1$PSI,y=NULL,mu=1500)
# PSI across Lot 2
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
t.test(lot2$PSI,y=NULL,mu=1500)
# PSI across Lot 3
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
t.test(lot3$PSI,y=NULL,mu=1500)
# Deliverable 1
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# PSI across all manufacturing lots
t.test(subset(suspension_table$PSI, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
# PSI across Lot 1
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
t.test(lot1$PSI,y=NULL,mu=1500)
# PSI across Lot 2
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
t.test(lot2$PSI,y=NULL,mu=1500)
# PSI across Lot 3
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
t.test(lot3$PSI,y=NULL,mu=1500)
View(car_table)
View(car_table)
ggplot(car_table, aes(mpg, vehicle_length))
plot <- ggplot(car_table, aes(mpg, vehicle_length))
library(ggplot2)
plot <- ggplot(car_table, aes(mpg, vehicle_length))
View(plot)
plot <- ggplot(car_table, aes(mpg, vehicle_length)) + geom_point()
plot <- ggplot(car_table, aes(mpg, vehicle_length)) + geom_point()
plot <- ggplot(car_table, aes(mpg, vehicle_length))
plot + geom_point()
plot <- ggplot(car_table, aes(mpg, vehicle_length))
plot + geom_point()
plot + geom_smooth(method = "lm", se = FALSE)
plot <- ggplot(car_table, aes(mpg, vehicle_length))
plot + geom_point() +
plot + geom_smooth(method = "lm", se = FALSE)
plot <- ggplot(car_table, aes(mpg, vehicle_length)) +
plot + geom_point() +
plot + geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_length)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, spoiler_angle)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
geom_point() +
geom_smooth(method = "lm", se = FALSE)
View(car_table)
rlang::last_error()
ggplot(car_table, aes(mpg, ground_clearance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, ground_clearance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(ground_clearance, mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, AWD)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_length)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
summary(lm(mpg ~ vehicle_weight + spoiler_angle
+ AWD,car_table))
ggplot(car_table, aes(mpg, vehicle_length)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, ground_clearance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, spoiler_angle)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, AWD)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(car_table, aes(mpg, vehicle_length)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
summary(lm(mpg ~ vehicle_weight + spoiler_angle
+ AWD,car_table))
# Deliverable 1
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# PSI across all manufacturing lots
t.test(subset(suspension_table$PSI, Manufacturing_Lot =="Lot1"), y=NULL, mu=1500)
# PSI across Lot 1
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
t.test(lot1$PSI,y=NULL,mu=1500)
# PSI across Lot 2
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
t.test(lot2$PSI,y=NULL,mu=1500)
# PSI across Lot 3
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
t.test(lot3$PSI,y=NULL,mu=1500)
# Deliverable 1
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
car_table <- read.csv(file='MechaCar_mpg.csv', check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function.
# In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table)
# Using the summary() function, determine the p-value and
# the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance
+ AWD,car_table))
# Deliverable 2
# Import and read in the Suspension_Coil.csv file as a table
suspension_table <- read.csv(file='Suspension_Coil.csv', check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the
# summarize() function to get the mean, median, variance, and standard deviation
# of the suspension coil's PSI column
total_summary <- suspension_table%>%summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) ,SD=sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the
# group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil's PSI column.
lot_summary <- suspension_table%>%
group_by(Manufacturing_Lot)%>%summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
# Deliverable 3
# write an RScript using the t.test() function to determine if the PSI across all manufacturing
# lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension_table$PSI,y=NULL,mu=1500)
# Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
# and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
# PSI across Lot 1
lot1 = subset(suspension_table, Manufacturing_Lot =="Lot1")
mean(lot1[['PSI']])
t.test(lot1$PSI,y=NULL,mu=1500)
# PSI across Lot 2
lot2 = subset(suspension_table, Manufacturing_Lot =="Lot2")
mean(lot2[['PSI']])
t.test(lot2$PSI,y=NULL,mu=1500)
# PSI across Lot 3
lot3 = subset(suspension_table, Manufacturing_Lot =="Lot3")
mean(lot3[['PSI']])
t.test(lot3$PSI,y=NULL,mu=1500)
View(total_summary)
View(lot_summary)
View(lot3)
